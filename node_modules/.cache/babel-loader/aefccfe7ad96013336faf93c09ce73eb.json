{"ast":null,"code":"var emptyArray = [];\nvar strCaretTrap = '[]';\nexport var defaultPlaceholderChar = '_';\nexport function convertMaskToPlaceholder(mask, placeholderChar) {\n  if (mask === void 0) {\n    mask = emptyArray;\n  }\n\n  if (placeholderChar === void 0) {\n    placeholderChar = defaultPlaceholderChar;\n  }\n\n  if (!Array.isArray(mask)) {\n    throw new Error('Text-mask:convertMaskToPlaceholder; The mask property must be an array.');\n  }\n\n  if (mask.indexOf(placeholderChar) !== -1) {\n    throw new Error('Placeholder character must not be used as part of the mask. Please specify a character ' + 'that is not present in your mask as your placeholder character.\\n\\n' + (\"The placeholder character that was received is: \" + JSON.stringify(placeholderChar) + \"\\n\\n\") + (\"The mask that was received is: \" + JSON.stringify(mask)));\n  }\n\n  return mask.map(function (char) {\n    return char instanceof RegExp ? placeholderChar : char;\n  }).join('');\n}\nexport function processCaretTraps(mask) {\n  var indexes = [];\n  var indexOfCaretTrap;\n\n  while (indexOfCaretTrap = mask.indexOf(strCaretTrap), indexOfCaretTrap !== -1) {\n    indexes.push(indexOfCaretTrap);\n    mask.splice(indexOfCaretTrap, 1);\n  }\n\n  return {\n    maskWithoutCaretTraps: mask,\n    indexes: indexes\n  };\n}","map":{"version":3,"sources":["C:/Users/Sebastian/Documents/code projects/DIrtyLittlePaws/DIrtyLittlePaws/node_modules/rsuite/esm/MaskedInput/utilities.js"],"names":["emptyArray","strCaretTrap","defaultPlaceholderChar","convertMaskToPlaceholder","mask","placeholderChar","Array","isArray","Error","indexOf","JSON","stringify","map","char","RegExp","join","processCaretTraps","indexes","indexOfCaretTrap","push","splice","maskWithoutCaretTraps"],"mappings":"AAAA,IAAIA,UAAU,GAAG,EAAjB;AACA,IAAIC,YAAY,GAAG,IAAnB;AACA,OAAO,IAAIC,sBAAsB,GAAG,GAA7B;AACP,OAAO,SAASC,wBAAT,CAAkCC,IAAlC,EAAwCC,eAAxC,EAAyD;AAC9D,MAAID,IAAI,KAAK,KAAK,CAAlB,EAAqB;AACnBA,IAAAA,IAAI,GAAGJ,UAAP;AACD;;AAED,MAAIK,eAAe,KAAK,KAAK,CAA7B,EAAgC;AAC9BA,IAAAA,eAAe,GAAGH,sBAAlB;AACD;;AAED,MAAI,CAACI,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAL,EAA0B;AACxB,UAAM,IAAII,KAAJ,CAAU,yEAAV,CAAN;AACD;;AAED,MAAIJ,IAAI,CAACK,OAAL,CAAaJ,eAAb,MAAkC,CAAC,CAAvC,EAA0C;AACxC,UAAM,IAAIG,KAAJ,CAAU,4FAA4F,qEAA5F,IAAqK,qDAAqDE,IAAI,CAACC,SAAL,CAAeN,eAAf,CAArD,GAAuF,MAA5P,KAAuQ,oCAAoCK,IAAI,CAACC,SAAL,CAAeP,IAAf,CAA3S,CAAV,CAAN;AACD;;AAED,SAAOA,IAAI,CAACQ,GAAL,CAAS,UAAUC,IAAV,EAAgB;AAC9B,WAAOA,IAAI,YAAYC,MAAhB,GAAyBT,eAAzB,GAA2CQ,IAAlD;AACD,GAFM,EAEJE,IAFI,CAEC,EAFD,CAAP;AAGD;AACD,OAAO,SAASC,iBAAT,CAA2BZ,IAA3B,EAAiC;AACtC,MAAIa,OAAO,GAAG,EAAd;AACA,MAAIC,gBAAJ;;AAEA,SAAOA,gBAAgB,GAAGd,IAAI,CAACK,OAAL,CAAaR,YAAb,CAAnB,EAA+CiB,gBAAgB,KAAK,CAAC,CAA5E,EAA+E;AAC7ED,IAAAA,OAAO,CAACE,IAAR,CAAaD,gBAAb;AACAd,IAAAA,IAAI,CAACgB,MAAL,CAAYF,gBAAZ,EAA8B,CAA9B;AACD;;AAED,SAAO;AACLG,IAAAA,qBAAqB,EAAEjB,IADlB;AAELa,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID","sourcesContent":["var emptyArray = [];\r\nvar strCaretTrap = '[]';\r\nexport var defaultPlaceholderChar = '_';\r\nexport function convertMaskToPlaceholder(mask, placeholderChar) {\r\n  if (mask === void 0) {\r\n    mask = emptyArray;\r\n  }\r\n\r\n  if (placeholderChar === void 0) {\r\n    placeholderChar = defaultPlaceholderChar;\r\n  }\r\n\r\n  if (!Array.isArray(mask)) {\r\n    throw new Error('Text-mask:convertMaskToPlaceholder; The mask property must be an array.');\r\n  }\r\n\r\n  if (mask.indexOf(placeholderChar) !== -1) {\r\n    throw new Error('Placeholder character must not be used as part of the mask. Please specify a character ' + 'that is not present in your mask as your placeholder character.\\n\\n' + (\"The placeholder character that was received is: \" + JSON.stringify(placeholderChar) + \"\\n\\n\") + (\"The mask that was received is: \" + JSON.stringify(mask)));\r\n  }\r\n\r\n  return mask.map(function (char) {\r\n    return char instanceof RegExp ? placeholderChar : char;\r\n  }).join('');\r\n}\r\nexport function processCaretTraps(mask) {\r\n  var indexes = [];\r\n  var indexOfCaretTrap;\r\n\r\n  while (indexOfCaretTrap = mask.indexOf(strCaretTrap), indexOfCaretTrap !== -1) {\r\n    indexes.push(indexOfCaretTrap);\r\n    mask.splice(indexOfCaretTrap, 1);\r\n  }\r\n\r\n  return {\r\n    maskWithoutCaretTraps: mask,\r\n    indexes: indexes\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}