{"ast":null,"code":"import { useEffect, useRef, useCallback } from 'react';\n/**\r\n * A timer hook\r\n * @param fn Timer callback function\r\n * @param ms Milliseconds of the timer\r\n * @param open Whether to open the timer\r\n */\n\nfunction useTimeout(fn, ms, open) {\n  if (ms === void 0) {\n    ms = 0;\n  }\n\n  if (open === void 0) {\n    open = true;\n  }\n\n  var timeout = useRef();\n  var clear = useCallback(function () {\n    timeout.current && clearTimeout(timeout.current);\n  }, []);\n  var set = useCallback(function () {\n    if (open) {\n      timeout.current = setTimeout(function () {\n        return fn === null || fn === void 0 ? void 0 : fn();\n      }, ms);\n    }\n  }, [ms, fn, open]);\n  useEffect(function () {\n    set();\n    return clear;\n  }, [fn, ms, open, clear, set]);\n  return {\n    clear: clear,\n    reset: set\n  };\n}\n\nexport default useTimeout;","map":{"version":3,"sources":["C:/Users/Sebastian/Documents/code projects/DIrtyLittlePaws/DIrtyLittlePaws/node_modules/rsuite/esm/utils/useTimeout.js"],"names":["useEffect","useRef","useCallback","useTimeout","fn","ms","open","timeout","clear","current","clearTimeout","set","setTimeout","reset"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,WAA5B,QAA+C,OAA/C;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,UAAT,CAAoBC,EAApB,EAAwBC,EAAxB,EAA4BC,IAA5B,EAAkC;AAChC,MAAID,EAAE,KAAK,KAAK,CAAhB,EAAmB;AACjBA,IAAAA,EAAE,GAAG,CAAL;AACD;;AAED,MAAIC,IAAI,KAAK,KAAK,CAAlB,EAAqB;AACnBA,IAAAA,IAAI,GAAG,IAAP;AACD;;AAED,MAAIC,OAAO,GAAGN,MAAM,EAApB;AACA,MAAIO,KAAK,GAAGN,WAAW,CAAC,YAAY;AAClCK,IAAAA,OAAO,CAACE,OAAR,IAAmBC,YAAY,CAACH,OAAO,CAACE,OAAT,CAA/B;AACD,GAFsB,EAEpB,EAFoB,CAAvB;AAGA,MAAIE,GAAG,GAAGT,WAAW,CAAC,YAAY;AAChC,QAAII,IAAJ,EAAU;AACRC,MAAAA,OAAO,CAACE,OAAR,GAAkBG,UAAU,CAAC,YAAY;AACvC,eAAOR,EAAE,KAAK,IAAP,IAAeA,EAAE,KAAK,KAAK,CAA3B,GAA+B,KAAK,CAApC,GAAwCA,EAAE,EAAjD;AACD,OAF2B,EAEzBC,EAFyB,CAA5B;AAGD;AACF,GANoB,EAMlB,CAACA,EAAD,EAAKD,EAAL,EAASE,IAAT,CANkB,CAArB;AAOAN,EAAAA,SAAS,CAAC,YAAY;AACpBW,IAAAA,GAAG;AACH,WAAOH,KAAP;AACD,GAHQ,EAGN,CAACJ,EAAD,EAAKC,EAAL,EAASC,IAAT,EAAeE,KAAf,EAAsBG,GAAtB,CAHM,CAAT;AAIA,SAAO;AACLH,IAAAA,KAAK,EAAEA,KADF;AAELK,IAAAA,KAAK,EAAEF;AAFF,GAAP;AAID;;AAED,eAAeR,UAAf","sourcesContent":["import { useEffect, useRef, useCallback } from 'react';\r\n\r\n/**\r\n * A timer hook\r\n * @param fn Timer callback function\r\n * @param ms Milliseconds of the timer\r\n * @param open Whether to open the timer\r\n */\r\nfunction useTimeout(fn, ms, open) {\r\n  if (ms === void 0) {\r\n    ms = 0;\r\n  }\r\n\r\n  if (open === void 0) {\r\n    open = true;\r\n  }\r\n\r\n  var timeout = useRef();\r\n  var clear = useCallback(function () {\r\n    timeout.current && clearTimeout(timeout.current);\r\n  }, []);\r\n  var set = useCallback(function () {\r\n    if (open) {\r\n      timeout.current = setTimeout(function () {\r\n        return fn === null || fn === void 0 ? void 0 : fn();\r\n      }, ms);\r\n    }\r\n  }, [ms, fn, open]);\r\n  useEffect(function () {\r\n    set();\r\n    return clear;\r\n  }, [fn, ms, open, clear, set]);\r\n  return {\r\n    clear: clear,\r\n    reset: set\r\n  };\r\n}\r\n\r\nexport default useTimeout;"]},"metadata":{},"sourceType":"module"}