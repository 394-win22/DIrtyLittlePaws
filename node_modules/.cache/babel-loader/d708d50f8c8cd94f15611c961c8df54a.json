{"ast":null,"code":"import React from 'react';\n/**\r\n * Resets the relative left distance of all cells in the array.\r\n * @param cells\r\n * @param extraWidth The additional width added to the last cell when there is a vertical scroll bar.\r\n */\n\nexport default function resetLeftForCells(cells, extraWidth) {\n  var left = 0;\n  var nextCells = [];\n\n  for (var i = 0; i < cells.length; i++) {\n    var cell = cells[i];\n    var nextCell = /*#__PURE__*/React.cloneElement(cell, {\n      left: left,\n      width: i === cells.length - 1 && extraWidth ? cell.props.width + extraWidth : cell.props.width\n    });\n    left += cell.props.width;\n    nextCells.push(nextCell);\n  }\n\n  return nextCells;\n}","map":{"version":3,"sources":["F:/GitHub Clone/DIrtyLittlePaws/DIrtyLittlePaws/node_modules/rsuite-table/es/utils/resetLeftForCells.js"],"names":["React","resetLeftForCells","cells","extraWidth","left","nextCells","i","length","cell","nextCell","cloneElement","width","props","push"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,iBAAT,CAA2BC,KAA3B,EAAkCC,UAAlC,EAA8C;AAC3D,MAAIC,IAAI,GAAG,CAAX;AACA,MAAIC,SAAS,GAAG,EAAhB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAIE,IAAI,GAAGN,KAAK,CAACI,CAAD,CAAhB;AACA,QAAIG,QAAQ,GAAG,aAAaT,KAAK,CAACU,YAAN,CAAmBF,IAAnB,EAAyB;AACnDJ,MAAAA,IAAI,EAAEA,IAD6C;AAEnDO,MAAAA,KAAK,EAAEL,CAAC,KAAKJ,KAAK,CAACK,MAAN,GAAe,CAArB,IAA0BJ,UAA1B,GAAuCK,IAAI,CAACI,KAAL,CAAWD,KAAX,GAAmBR,UAA1D,GAAuEK,IAAI,CAACI,KAAL,CAAWD;AAFtC,KAAzB,CAA5B;AAIAP,IAAAA,IAAI,IAAII,IAAI,CAACI,KAAL,CAAWD,KAAnB;AACAN,IAAAA,SAAS,CAACQ,IAAV,CAAeJ,QAAf;AACD;;AAED,SAAOJ,SAAP;AACD","sourcesContent":["import React from 'react';\r\n/**\r\n * Resets the relative left distance of all cells in the array.\r\n * @param cells\r\n * @param extraWidth The additional width added to the last cell when there is a vertical scroll bar.\r\n */\r\n\r\nexport default function resetLeftForCells(cells, extraWidth) {\r\n  var left = 0;\r\n  var nextCells = [];\r\n\r\n  for (var i = 0; i < cells.length; i++) {\r\n    var cell = cells[i];\r\n    var nextCell = /*#__PURE__*/React.cloneElement(cell, {\r\n      left: left,\r\n      width: i === cells.length - 1 && extraWidth ? cell.props.width + extraWidth : cell.props.width\r\n    });\r\n    left += cell.props.width;\r\n    nextCells.push(nextCell);\r\n  }\r\n\r\n  return nextCells;\r\n}"]},"metadata":{},"sourceType":"module"}