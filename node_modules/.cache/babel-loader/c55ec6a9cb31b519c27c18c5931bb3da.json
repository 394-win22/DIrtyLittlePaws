{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { useState, useMemo } from 'react';\nimport slice from 'lodash/slice';\nimport { shallowEqual, useUpdateEffect } from '../utils';\nimport { findNodeOfTree } from '../utils/treeUtils';\nexport function getColumnsAndPaths(data, value, options) {\n  var childrenKey = options.childrenKey,\n      valueKey = options.valueKey,\n      isAttachChildren = options.isAttachChildren;\n  var columns = [];\n  var paths = [];\n\n  var findNode = function findNode(items) {\n    var _loop = function _loop(i) {\n      var children = items[i][childrenKey];\n\n      if (shallowEqual(items[i][valueKey], value)) {\n        return {\n          v: {\n            items: items,\n            active: items[i]\n          }\n        };\n      } else if (children) {\n        var node = findNode(children);\n\n        if (node) {\n          columns.push(children.map(function (item) {\n            return _extends({}, item, {\n              parent: items[i]\n            });\n          }));\n          paths.push(node.active);\n          return {\n            v: {\n              items: items,\n              active: items[i]\n            }\n          };\n        }\n      }\n    };\n\n    for (var i = 0; i < items.length; i += 1) {\n      var _ret = _loop(i);\n\n      if (typeof _ret === \"object\") return _ret.v;\n    }\n\n    return null;\n  };\n\n  var selectedNode = findNode(data);\n  columns.push(data);\n\n  if (selectedNode) {\n    paths.push(selectedNode.active);\n  }\n\n  if (isAttachChildren) {\n    var valueToNode = findNodeOfTree(data, function (item) {\n      return item[valueKey] === value;\n    });\n\n    if (valueToNode !== null && valueToNode !== void 0 && valueToNode[childrenKey]) {\n      columns.unshift(valueToNode[childrenKey]);\n    }\n  }\n\n  columns.reverse();\n  paths.reverse();\n  return {\n    columns: columns,\n    paths: paths\n  };\n}\nexport function usePaths(props) {\n  var data = props.data,\n      valueKey = props.valueKey,\n      childrenKey = props.childrenKey,\n      value = props.value;\n\n  var _useMemo = useMemo(function () {\n    return getColumnsAndPaths(data, value, {\n      valueKey: valueKey,\n      childrenKey: childrenKey\n    });\n  }, [data, value, valueKey, childrenKey]),\n      columns = _useMemo.columns,\n      paths = _useMemo.paths; // The columns displayed in the cascading panel.\n\n\n  var _useState = useState(columns),\n      columnData = _useState[0],\n      setColumnData = _useState[1]; // The path after cascading data selection.\n\n\n  var _useState2 = useState(paths),\n      selectedPaths = _useState2[0],\n      setSelectedPaths = _useState2[1]; // The path corresponding to the selected value.\n\n\n  var _useState3 = useState(paths),\n      valueToPaths = _useState3[0],\n      setValueToPaths = _useState3[1];\n  /**\r\n   * Add a list of options to the cascading panel. Used for lazy loading options.\r\n   * @param column\r\n   * @param index The index of the current column.\r\n   */\n\n\n  function addColumn(column, index) {\n    setColumnData([].concat(slice(columnData, 0, index), [column]));\n  }\n  /**\r\n   * Enforce update of columns and paths.\r\n   * @param nextValue  Selected value\r\n   * @param isAttachChildren  Whether to attach the children of the selected node.\r\n   */\n\n\n  function enforceUpdate(nextValue, isAttachChildren) {\n    var _getColumnsAndPaths = getColumnsAndPaths(data, nextValue, {\n      valueKey: valueKey,\n      childrenKey: childrenKey,\n      isAttachChildren: isAttachChildren\n    }),\n        columns = _getColumnsAndPaths.columns,\n        paths = _getColumnsAndPaths.paths;\n\n    setColumnData(columns);\n    setSelectedPaths(paths);\n  }\n\n  useUpdateEffect(function () {\n    // Update paths when value is updated, then update valueToPaths.\n    setValueToPaths(paths);\n  }, [paths]);\n  useUpdateEffect(function () {\n    enforceUpdate(value);\n  }, [data]);\n  return {\n    enforceUpdate: enforceUpdate,\n    columnData: columnData,\n    valueToPaths: valueToPaths,\n    selectedPaths: selectedPaths,\n    setValueToPaths: setValueToPaths,\n    setColumnData: setColumnData,\n    setSelectedPaths: setSelectedPaths,\n    addColumn: addColumn\n  };\n}","map":{"version":3,"sources":["F:/GitHub Clone/DIrtyLittlePaws/DIrtyLittlePaws/node_modules/rsuite/esm/Cascader/utils.js"],"names":["_extends","useState","useMemo","slice","shallowEqual","useUpdateEffect","findNodeOfTree","getColumnsAndPaths","data","value","options","childrenKey","valueKey","isAttachChildren","columns","paths","findNode","items","_loop","i","children","v","active","node","push","map","item","parent","length","_ret","selectedNode","valueToNode","unshift","reverse","usePaths","props","_useMemo","_useState","columnData","setColumnData","_useState2","selectedPaths","setSelectedPaths","_useState3","valueToPaths","setValueToPaths","addColumn","column","index","concat","enforceUpdate","nextValue","_getColumnsAndPaths"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport { useState, useMemo } from 'react';\r\nimport slice from 'lodash/slice';\r\nimport { shallowEqual, useUpdateEffect } from '../utils';\r\nimport { findNodeOfTree } from '../utils/treeUtils';\r\nexport function getColumnsAndPaths(data, value, options) {\r\n  var childrenKey = options.childrenKey,\r\n      valueKey = options.valueKey,\r\n      isAttachChildren = options.isAttachChildren;\r\n  var columns = [];\r\n  var paths = [];\r\n\r\n  var findNode = function findNode(items) {\r\n    var _loop = function _loop(i) {\r\n      var children = items[i][childrenKey];\r\n\r\n      if (shallowEqual(items[i][valueKey], value)) {\r\n        return {\r\n          v: {\r\n            items: items,\r\n            active: items[i]\r\n          }\r\n        };\r\n      } else if (children) {\r\n        var node = findNode(children);\r\n\r\n        if (node) {\r\n          columns.push(children.map(function (item) {\r\n            return _extends({}, item, {\r\n              parent: items[i]\r\n            });\r\n          }));\r\n          paths.push(node.active);\r\n          return {\r\n            v: {\r\n              items: items,\r\n              active: items[i]\r\n            }\r\n          };\r\n        }\r\n      }\r\n    };\r\n\r\n    for (var i = 0; i < items.length; i += 1) {\r\n      var _ret = _loop(i);\r\n\r\n      if (typeof _ret === \"object\") return _ret.v;\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  var selectedNode = findNode(data);\r\n  columns.push(data);\r\n\r\n  if (selectedNode) {\r\n    paths.push(selectedNode.active);\r\n  }\r\n\r\n  if (isAttachChildren) {\r\n    var valueToNode = findNodeOfTree(data, function (item) {\r\n      return item[valueKey] === value;\r\n    });\r\n\r\n    if (valueToNode !== null && valueToNode !== void 0 && valueToNode[childrenKey]) {\r\n      columns.unshift(valueToNode[childrenKey]);\r\n    }\r\n  }\r\n\r\n  columns.reverse();\r\n  paths.reverse();\r\n  return {\r\n    columns: columns,\r\n    paths: paths\r\n  };\r\n}\r\nexport function usePaths(props) {\r\n  var data = props.data,\r\n      valueKey = props.valueKey,\r\n      childrenKey = props.childrenKey,\r\n      value = props.value;\r\n\r\n  var _useMemo = useMemo(function () {\r\n    return getColumnsAndPaths(data, value, {\r\n      valueKey: valueKey,\r\n      childrenKey: childrenKey\r\n    });\r\n  }, [data, value, valueKey, childrenKey]),\r\n      columns = _useMemo.columns,\r\n      paths = _useMemo.paths; // The columns displayed in the cascading panel.\r\n\r\n\r\n  var _useState = useState(columns),\r\n      columnData = _useState[0],\r\n      setColumnData = _useState[1]; // The path after cascading data selection.\r\n\r\n\r\n  var _useState2 = useState(paths),\r\n      selectedPaths = _useState2[0],\r\n      setSelectedPaths = _useState2[1]; // The path corresponding to the selected value.\r\n\r\n\r\n  var _useState3 = useState(paths),\r\n      valueToPaths = _useState3[0],\r\n      setValueToPaths = _useState3[1];\r\n  /**\r\n   * Add a list of options to the cascading panel. Used for lazy loading options.\r\n   * @param column\r\n   * @param index The index of the current column.\r\n   */\r\n\r\n\r\n  function addColumn(column, index) {\r\n    setColumnData([].concat(slice(columnData, 0, index), [column]));\r\n  }\r\n  /**\r\n   * Enforce update of columns and paths.\r\n   * @param nextValue  Selected value\r\n   * @param isAttachChildren  Whether to attach the children of the selected node.\r\n   */\r\n\r\n\r\n  function enforceUpdate(nextValue, isAttachChildren) {\r\n    var _getColumnsAndPaths = getColumnsAndPaths(data, nextValue, {\r\n      valueKey: valueKey,\r\n      childrenKey: childrenKey,\r\n      isAttachChildren: isAttachChildren\r\n    }),\r\n        columns = _getColumnsAndPaths.columns,\r\n        paths = _getColumnsAndPaths.paths;\r\n\r\n    setColumnData(columns);\r\n    setSelectedPaths(paths);\r\n  }\r\n\r\n  useUpdateEffect(function () {\r\n    // Update paths when value is updated, then update valueToPaths.\r\n    setValueToPaths(paths);\r\n  }, [paths]);\r\n  useUpdateEffect(function () {\r\n    enforceUpdate(value);\r\n  }, [data]);\r\n  return {\r\n    enforceUpdate: enforceUpdate,\r\n    columnData: columnData,\r\n    valueToPaths: valueToPaths,\r\n    selectedPaths: selectedPaths,\r\n    setValueToPaths: setValueToPaths,\r\n    setColumnData: setColumnData,\r\n    setSelectedPaths: setSelectedPaths,\r\n    addColumn: addColumn\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}