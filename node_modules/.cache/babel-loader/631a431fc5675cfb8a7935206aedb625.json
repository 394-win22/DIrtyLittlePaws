{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport * as ReactIs from 'react-is';\nimport flatten from 'lodash/flatten';\nimport ColumnGroup from '../ColumnGroup';\n/**\r\n * Get the columns ReactElement array.\r\n * - Handling the case where there is an array of <Column> in children.\r\n * - Filter empty items in children.\r\n */\n\nfunction getTableColumns(children) {\n  var childrenArray = Array.isArray(children) ? children : [children];\n  var flattenColumns = flatten(childrenArray).map(function (column) {\n    // If the column is a group, we need to get the columns from the children.\n    if ((column === null || column === void 0 ? void 0 : column.type) === ColumnGroup) {\n      var _column$props = column === null || column === void 0 ? void 0 : column.props,\n          header = _column$props.header,\n          groupChildren = _column$props.children,\n          align = _column$props.align,\n          fixed = _column$props.fixed,\n          verticalAlign = _column$props.verticalAlign,\n          groupHeaderHeight = _column$props.groupHeaderHeight;\n\n      var childColumns = getTableColumns(groupChildren);\n      return childColumns.map(function (childColumn, index) {\n        // Overwrite the props set by ColumnGroup to Column.\n        var groupCellProps = _extends({}, childColumn === null || childColumn === void 0 ? void 0 : childColumn.props, {\n          groupHeaderHeight: groupHeaderHeight,\n          fixed: fixed,\n          // Column extends the properties of Group （align，verticalAlign）\n          align: (childColumn === null || childColumn === void 0 ? void 0 : childColumn.props.align) || align,\n          verticalAlign: (childColumn === null || childColumn === void 0 ? void 0 : childColumn.props.verticalAlign) || verticalAlign\n        });\n        /**\r\n         * Set attributes for the first column in the group:\r\n         * @field groupCount: The number of grouping sub-items.\r\n         * @field groupHeader: Group header title.\r\n         * @field resizable: Set to not resizable.\r\n         */\n\n\n        if (index === 0) {\n          groupCellProps.groupAlign = align;\n          groupCellProps.groupVerticalAlign = verticalAlign;\n          groupCellProps.groupCount = childColumns.length;\n          groupCellProps.groupHeader = header;\n          groupCellProps.resizable = false;\n        }\n\n        return /*#__PURE__*/React.cloneElement(childColumn, groupCellProps);\n      });\n    } else if (ReactIs.isFragment(column)) {\n      var _column$props2; // If the column is a fragment, we need to get the columns from the children.\n\n\n      return getTableColumns((_column$props2 = column.props) === null || _column$props2 === void 0 ? void 0 : _column$props2.children);\n    } // If the column is not a group, we just return the column.\n\n\n    return column;\n  }); // Flatten the array in Columns into a one-dimensional array, and calculate lastColumn and firstColumn.\n\n  return flatten(flattenColumns).filter(Boolean);\n}\n\nexport default getTableColumns;","map":{"version":3,"sources":["C:/Users/Sebastian/Documents/code projects/DIrtyLittlePaws/DIrtyLittlePaws/node_modules/rsuite-table/es/utils/getTableColumns.js"],"names":["_extends","React","ReactIs","flatten","ColumnGroup","getTableColumns","children","childrenArray","Array","isArray","flattenColumns","map","column","type","_column$props","props","header","groupChildren","align","fixed","verticalAlign","groupHeaderHeight","childColumns","childColumn","index","groupCellProps","groupAlign","groupVerticalAlign","groupCount","length","groupHeader","resizable","cloneElement","isFragment","_column$props2","filter","Boolean"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport React from 'react';\r\nimport * as ReactIs from 'react-is';\r\nimport flatten from 'lodash/flatten';\r\nimport ColumnGroup from '../ColumnGroup';\r\n/**\r\n * Get the columns ReactElement array.\r\n * - Handling the case where there is an array of <Column> in children.\r\n * - Filter empty items in children.\r\n */\r\n\r\nfunction getTableColumns(children) {\r\n  var childrenArray = Array.isArray(children) ? children : [children];\r\n  var flattenColumns = flatten(childrenArray).map(function (column) {\r\n    // If the column is a group, we need to get the columns from the children.\r\n    if ((column === null || column === void 0 ? void 0 : column.type) === ColumnGroup) {\r\n      var _column$props = column === null || column === void 0 ? void 0 : column.props,\r\n          header = _column$props.header,\r\n          groupChildren = _column$props.children,\r\n          align = _column$props.align,\r\n          fixed = _column$props.fixed,\r\n          verticalAlign = _column$props.verticalAlign,\r\n          groupHeaderHeight = _column$props.groupHeaderHeight;\r\n\r\n      var childColumns = getTableColumns(groupChildren);\r\n      return childColumns.map(function (childColumn, index) {\r\n        // Overwrite the props set by ColumnGroup to Column.\r\n        var groupCellProps = _extends({}, childColumn === null || childColumn === void 0 ? void 0 : childColumn.props, {\r\n          groupHeaderHeight: groupHeaderHeight,\r\n          fixed: fixed,\r\n          // Column extends the properties of Group （align，verticalAlign）\r\n          align: (childColumn === null || childColumn === void 0 ? void 0 : childColumn.props.align) || align,\r\n          verticalAlign: (childColumn === null || childColumn === void 0 ? void 0 : childColumn.props.verticalAlign) || verticalAlign\r\n        });\r\n        /**\r\n         * Set attributes for the first column in the group:\r\n         * @field groupCount: The number of grouping sub-items.\r\n         * @field groupHeader: Group header title.\r\n         * @field resizable: Set to not resizable.\r\n         */\r\n\r\n\r\n        if (index === 0) {\r\n          groupCellProps.groupAlign = align;\r\n          groupCellProps.groupVerticalAlign = verticalAlign;\r\n          groupCellProps.groupCount = childColumns.length;\r\n          groupCellProps.groupHeader = header;\r\n          groupCellProps.resizable = false;\r\n        }\r\n\r\n        return /*#__PURE__*/React.cloneElement(childColumn, groupCellProps);\r\n      });\r\n    } else if (ReactIs.isFragment(column)) {\r\n      var _column$props2;\r\n\r\n      // If the column is a fragment, we need to get the columns from the children.\r\n      return getTableColumns((_column$props2 = column.props) === null || _column$props2 === void 0 ? void 0 : _column$props2.children);\r\n    } // If the column is not a group, we just return the column.\r\n\r\n\r\n    return column;\r\n  }); // Flatten the array in Columns into a one-dimensional array, and calculate lastColumn and firstColumn.\r\n\r\n  return flatten(flattenColumns).filter(Boolean);\r\n}\r\n\r\nexport default getTableColumns;"]},"metadata":{},"sourceType":"module"}